1. In this lesson, you created a middleware function called asyncWrapper. Why?

We create the asyncWrapper in order to 1) clean up the code and eliminate the repetitive "Try and Catch" statements embedded in each of the CRUD functions (getALLtasks, createTask,getTask..etc ).

2.Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(createCustomError(`No Task with id: ${taskID}`, 404))
  }
  res.status(200).json({ task });
});